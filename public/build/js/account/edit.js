(self["webpackChunk"] = self["webpackChunk"] || []).push([["js/account/edit"],{

/***/ "./assets/js/account/edit.js":
/*!***********************************!*\
  !*** ./assets/js/account/edit.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
__webpack_require__(/*! core-js/modules/es.array.some.js */ "./node_modules/core-js/modules/es.array.some.js");
__webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
// Get all the text fields with the class 'edit_form_account_info'
var textFields = document.querySelectorAll('.edit_form_account_info');
var radios = document.querySelectorAll('.edit_form_account_info_radio'); // Assuming you have a class for radio buttons
var imageFileInput = document.querySelector('.edit_form_account_info_image_file'); // Assuming you have a class for the image file input
var button = document.getElementById('account-info-btn-save');

// Create an object to store the initial values
var initialValues = {};

// Store the initial values of all text fields
textFields.forEach(function (textField) {
  initialValues[textField.id] = textField.value;
});

// Store the initial values of all radio buttons
radios.forEach(function (radio) {
  var checkedInput = radio.querySelector('input:checked');
  if (checkedInput) {
    initialValues[radio.id] = checkedInput.value; // Store the initial selected value of radios
  }
});

// Store the initial value of the image file input
var initialImageFileValue = imageFileInput.value;

// Function to check if imageFile is not empty
function isImageFileNotEmpty() {
  return imageFileInput.files && imageFileInput.files.length > 0;
}

// Function to update the button class based on input changes
function updateButtonClass() {
  var isModified = Array.from(textFields).some(function (textField) {
    return textField.value !== initialValues[textField.id];
  });
  var isRadioModified = Array.from(radios).some(function (radio) {
    var checkedInput = radio.querySelector('input:checked');
    return checkedInput && checkedInput.value !== initialValues[radio.id];
  });
  var isImageModified = imageFileInput.value !== initialImageFileValue || isImageFileNotEmpty();
  if (isModified || isRadioModified || isImageModified) {
    button.classList.remove('btn-disabled');
    button.classList.add('btn-enabled');
  } else {
    button.classList.remove('btn-enabled');
    button.classList.add('btn-disabled');
  }
}

// Add an 'input' event listener to each text field
textFields.forEach(function (textField) {
  textField.addEventListener('input', updateButtonClass);
});

// Add a 'change' event listener to each radio button
radios.forEach(function (radio) {
  radio.addEventListener('change', updateButtonClass);
});

// Add a 'change' event listener to the imageFile input
imageFileInput.addEventListener('change', updateButtonClass);

// Call the function initially to set the initial state
updateButtonClass();

// Get the image and file input elements
var imageContainer = document.getElementById('image-container');

// Add a click event listener to the image container
imageContainer.addEventListener('click', function () {
  // Trigger a click on the hidden file input
  imageFileInput.click();
});

// Add an event listener to the file input to handle file selection
imageFileInput.addEventListener('change', function (event) {
  // Display the selected image (assuming you want to display the selected image)
  var selectedFile = event.target.files[0];
  if (selectedFile) {
    var reader = new FileReader();
    reader.onload = function (e) {
      // Set the image source to the selected file
      imageContainer.querySelector('img').src = e.target.result;
    };
    reader.readAsDataURL(selectedFile);
  }
});

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendors-node_modules_core-js_internals_dom-iterables_js-node_modules_core-js_internals_dom-to-43e662","vendors-node_modules_core-js_internals_create-property_js-node_modules_core-js_modules_es_str-d1bad0","vendors-node_modules_core-js_modules_es_array_for-each_js-node_modules_core-js_modules_es_arr-5099fc"], () => (__webpack_exec__("./assets/js/account/edit.js")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,